"""
Django settings for hospital project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
# import os 
# from dotenv import load_dotenv   #for python-dotenv method
# load_dotenv()                    #for python-dotenv method
from pathlib import Path
import environ
env = environ.Env()
environ.Env.read_env()
# import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^_$12cmksnr$td6wt8#qk*pek3hr&1&x0ch^as!6p1l^gjn#z5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'home',
    'django.contrib.sites',
    # 'oauth_app',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'payments',
    'rest_framework_swagger',
    'drf_yasg',
    # 'django.contrib.staticfiles',
    # 'social_django'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hospital.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hospital.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'home.USER'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER =env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES':['rest_framework.authentication.TokenAuthentication',],
    
    # 'DEFAULT_SCHEMA_CLASS': [rest_framework.schemas.coreapi.AutoSchema,]
    
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
    # 'social_core.backends.google.GoogleOAuth2',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}

SITE_ID = 4



LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
# ACCOUNT_AUTHENTICATION_METHOD ="email"
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'email'

RAZORPAY_KEY_ID = ""
RAZORPAY_KEY_SECRET =""


# SOCIAL_AUTH_PIPELINE = (
#     # Get the information we can about the user and return it in a simple
#     # format to create the user instance later. In some cases the details are
#     # already part of the auth response from the provider, but sometimes this
#     # could hit a provider API.
#     'social_core.pipeline.social_auth.social_details',

#     # Get the social uid from whichever service we're authing thru. The uid is
#     # the unique identifier of the given user in the provider.
#     'social_core.pipeline.social_auth.social_uid',

#     # Verifies that the current auth process is valid within the current
#     # project, this is where emails and domains whitelists are applied (if
#     # defined).
#     'social_core.pipeline.social_auth.auth_allowed',

#     # Checks if the current social-account is already associated in the site.
#     'social_core.pipeline.social_auth.social_user',

#     # Make up a username for this person, appends a random string at the end if
#     # there's any collision.
#     'social_core.pipeline.user.get_username',

#     # Send a validation email to the user to verify its email address.
#     # Disabled by default.
#     # 'social_core.pipeline.mail.mail_validation',

#     # Associates the current social details with another user account with
#     # a similar email address. Disabled by default.
#     # 'social_core.pipeline.social_auth.associate_by_email',

#     # Create a user account if we haven't found one yet.
#     'social_core.pipeline.user.create_user',

#     # Create the record that associates the social account with the user.
#     'social_core.pipeline.social_auth.associate_user',

#     # Populate the extra_data field in the social record with the values
#     # specified by settings (and the default ones like access_token, etc).
#     'social_core.pipeline.social_auth.load_extra_data',

#     # Update the user record with any changed info from the auth service.
#     'social_core.pipeline.user.user_details',
# )
